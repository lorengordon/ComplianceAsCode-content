# platform = multi_platform_rhel,multi_platform_fedora,multi_platform_ol,multi_platform_rhv,multi_platform_ubuntu,multi_platform_sle
# reboot = false
# strategy = restrict
# complexity = low
# disruption = low
- (xccdf-var var_password_pam_minlen)


- name: Ensure PAM Enforces Password Requirements - Minimum Length - Find pwquality.conf.d files
  ansible.builtin.find:
    paths: /etc/security/pwquality.conf.d/
    patterns: "*.conf"
  register: pwquality_conf_d_files

- name: Ensure PAM Enforces Password Requirements - Minimum Length - Ensure minlen is not set in pwquality.conf.d
  ansible.builtin.lineinfile:
    path: "{{ item.path }}"
    regexp: '^\s*\bminlen\b.*'
    state: absent
  with_items: "{{ pwquality_conf_d_files.files }}"



- name: 'Ensure PAM Enforces Password Requirements - Minimum Length - Check if /etc/pam.d/system-auth file is present'
  ansible.builtin.stat:
    path: /etc/pam.d/system-auth
  register: result_pam_file_present

- name: 'Ensure PAM Enforces Password Requirements - Minimum Length - Check the proper remediation for the system'
  block:
    - name: 'Ensure PAM Enforces Password Requirements - Minimum Length - Define the PAM file to be edited as a local fact'
      ansible.builtin.set_fact:
        pam_file_path: /etc/pam.d/system-auth

    - name: 'Ensure PAM Enforces Password Requirements - Minimum Length - Check if system relies on authselect tool'
      ansible.builtin.stat:
        path: /usr/bin/authselect
      register: result_authselect_present

    - name: 'Ensure PAM Enforces Password Requirements - Minimum Length - Ensure authselect custom profile is used if authselect is present'
      block:
        - name: 'Ensure PAM Enforces Password Requirements - Minimum Length - Check integrity of authselect current profile'
          ansible.builtin.command:
            cmd: authselect check
          register: result_authselect_check_cmd
          changed_when: false
          failed_when: false

        - name: 'Ensure PAM Enforces Password Requirements - Minimum Length - Informative message based on the authselect integrity check result'
          ansible.builtin.assert:
            that:
              - result_authselect_check_cmd.rc == 0
            fail_msg:
              - authselect integrity check failed. Remediation aborted!
              - This remediation could not be applied because an authselect profile was not selected or the selected profile is not intact.
              - It is not recommended to manually edit the PAM files when authselect tool is available.
              - In cases where the default authselect profile does not cover a specific demand, a custom authselect profile is recommended.
            success_msg:
              - authselect integrity check passed

        - name: 'Ensure PAM Enforces Password Requirements - Minimum Length - Get authselect current profile'
          ansible.builtin.shell:
            cmd: authselect current -r | awk '{ print $1 }'
          register: result_authselect_profile
          changed_when: false
          when:
            - result_authselect_check_cmd is success

        - name: 'Ensure PAM Enforces Password Requirements - Minimum Length - Define the current authselect profile as a local fact'
          ansible.builtin.set_fact:
            authselect_current_profile: "{{ result_authselect_profile.stdout }}"
            authselect_custom_profile: "{{ result_authselect_profile.stdout }}"
          when:
            - result_authselect_profile is not skipped
            - result_authselect_profile.stdout is match("custom/")

        - name: 'Ensure PAM Enforces Password Requirements - Minimum Length - Define the new authselect custom profile as a local fact'
          ansible.builtin.set_fact:
            authselect_current_profile: "{{ result_authselect_profile.stdout }}"
            authselect_custom_profile: "custom/hardening"
          when:
            - result_authselect_profile is not skipped
            - result_authselect_profile.stdout is not match("custom/")

        - name: 'Ensure PAM Enforces Password Requirements - Minimum Length - Get authselect current features to also enable them in the custom profile'
          ansible.builtin.shell:
            cmd: authselect current | tail -n+3 | awk '{ print $2 }'
          register: result_authselect_features
          changed_when: false
          when:
            - result_authselect_profile is not skipped
            - authselect_current_profile is not match("custom/")

        - name: 'Ensure PAM Enforces Password Requirements - Minimum Length - Check if any custom profile with the same name was already created'
          ansible.builtin.stat:
            path: /etc/authselect/{{ authselect_custom_profile }}
          register: result_authselect_custom_profile_present
          changed_when: false
          when:
            - authselect_current_profile is not match("custom/")

        - name: 'Ensure PAM Enforces Password Requirements - Minimum Length - Create an authselect custom profile based on the current profile'
          ansible.builtin.command:
            cmd: authselect create-profile hardening -b {{ authselect_current_profile }}
          when:
            - result_authselect_check_cmd is success
            - authselect_current_profile is not match("custom/")
            - not result_authselect_custom_profile_present.stat.exists

        - name: 'Ensure PAM Enforces Password Requirements - Minimum Length - Ensure authselect changes are applied'
          ansible.builtin.command:
            cmd: authselect apply-changes -b --backup=before-hardening-custom-profile
          when:
            - result_authselect_check_cmd is success
            - result_authselect_profile is not skipped
            - authselect_current_profile is not match("custom/")
            - authselect_custom_profile is not match(authselect_current_profile)

        - name: 'Ensure PAM Enforces Password Requirements - Minimum Length - Ensure the authselect custom profile is selected'
          ansible.builtin.command:
            cmd: authselect select {{ authselect_custom_profile }}
          register: result_pam_authselect_select_profile
          when:
            - result_authselect_check_cmd is success
            - result_authselect_profile is not skipped
            - authselect_current_profile is not match("custom/")
            - authselect_custom_profile is not match(authselect_current_profile)

        - name: 'Ensure PAM Enforces Password Requirements - Minimum Length - Restore the authselect features in the custom profile'
          ansible.builtin.command:
            cmd: authselect enable-feature {{ item }}
          loop: "{{ result_authselect_features.stdout_lines }}"
          register: result_pam_authselect_restore_features
          when:
            - result_authselect_profile is not skipped
            - result_authselect_features is not skipped
            - result_pam_authselect_select_profile is not skipped

        - name: 'Ensure PAM Enforces Password Requirements - Minimum Length - Ensure authselect changes are applied'
          ansible.builtin.command:
            cmd: authselect apply-changes -b --backup=after-hardening-custom-profile
          when:
            - result_authselect_check_cmd is success
            - result_authselect_profile is not skipped
            - result_pam_authselect_restore_features is not skipped

        - name: 'Ensure PAM Enforces Password Requirements - Minimum Length - Change the PAM file to be edited according to the custom authselect profile'
          ansible.builtin.set_fact:
            pam_file_path: "/etc/authselect/{{ authselect_custom_profile }}/{{ pam_file_path | basename }}"
      when:
        - result_authselect_present.stat.exists

    - name: 'Ensure PAM Enforces Password Requirements - Minimum Length - Ensure the "minlen" option from "pam_pwquality.so" is not present in {{ pam_file_path }}'
      ansible.builtin.replace:
        dest: "{{ pam_file_path }}"
        regexp: (.*password.*pam_pwquality.so.*)\bminlen\b=?[0-9a-zA-Z]*(.*)
        replace: '\1\2'
      register: result_pam_option_removal

    - name: 'Ensure PAM Enforces Password Requirements - Minimum Length - Ensure authselect changes are applied'
      ansible.builtin.command:
        cmd: authselect apply-changes -b
      when:
        - result_authselect_present.stat.exists
        - result_pam_option_removal is changed
  when:
    - result_pam_file_present.stat.exists


- name: Ensure PAM Enforces Password Requirements - Minimum Length - Ensure PAM variable minlen is set accordingly
  ansible.builtin.lineinfile:
    create: yes
    dest: "/etc/security/pwquality.conf"
    regexp: '^#?\s*minlen'
    line: "minlen = {{ var_password_pam_minlen }}"
# platform = multi_platform_all
# reboot = false
# strategy = configure
# complexity = low
# disruption = high




   


- name: "Add nosuid Option to /dev/shm: Check information associated to mountpoint"
  command: findmnt  '/dev/shm'
  register: device_name
  failed_when: device_name.rc > 1
  changed_when: False

- name: "Add nosuid Option to /dev/shm: Create mount_info dictionary variable"
  set_fact:
    mount_info: "{{ mount_info|default({})|combine({item.0: item.1}) }}"
  with_together:
    - "{{ device_name.stdout_lines[0].split() | list | lower }}"
    - "{{ device_name.stdout_lines[1].split() | list }}"
  when:
    - device_name.stdout is defined and device_name.stdout_lines is defined
    - (device_name.stdout | length > 0)

- name: "Add nosuid Option to /dev/shm: If /dev/shm not mounted, craft mount_info manually"
  set_fact:
    mount_info: '{{ mount_info|default({})|combine({item.0: item.1}) }}'
  with_together:
    - ["target", "source", "fstype", "options"]
    - ["/dev/shm", "tmpfs", "tmpfs", "defaults"]
  when:
    - ("" | length == 0)
    - (device_name.stdout | length == 0)

- name: "Add nosuid Option to /dev/shm: Make sure nosuid option is part of the to /dev/shm options"
  set_fact:

    mount_info: "{{ mount_info | combine( {'options':''~mount_info.options~',nosuid' }) }}"

  when:
    - mount_info is defined and "nosuid" not in mount_info.options

- name: "Add nosuid Option to /dev/shm: Ensure /dev/shm is mounted with nosuid option"
  mount:
    path: "/dev/shm"
    src: "{{ mount_info.source }}"
    opts: "{{ mount_info.options }}"
    state: "mounted"
    fstype: "{{ mount_info.fstype }}"
  when:
    - (device_name.stdout is defined and (device_name.stdout | length > 0)) or ("" | length == 0)